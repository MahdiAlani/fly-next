// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id String @id @default(cuid())
  firstName String
  lastName String
  email String @unique
  password String
  phoneNumber String? @unique
  profilePic String?
  bookings Booking[]
  hotels Hotel[]
  notifications Notification[]
  itineraries Itinerary[]
}

model Hotel {
  id String @id @default(cuid())
  ownerId String 
  bookingId String?
  name String
  logo String?
  address String
  location String
  rating Int?
  images Json? @default("[]")
  roomType RoomType[]
  bookings Booking[]
  owner    User    @relation(fields: [ownerId], references: [id])
}

model RoomType {
  id            String   @id @default(cuid())
  name          String
  amenities     Json?     @default("[]")
  pricePerNight Int
  images        Json?     @default("[]")
  hotelId       String
  rooms         Int
  hotel         Hotel    @relation(fields: [hotelId], references: [id])
  bookings      Booking[]
}

enum BookingStatus {
  CONFIRMED
  PENDING
  CANCELLED
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  itineraryId String? 
  hotelId     String?
  roomTypeId  String?
  flightId    String?
  checkIn     DateTime?
  checkOut    DateTime?
  price       Float?
  status      BookingStatus
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id])
  hotel       Hotel?   @relation(fields: [hotelId], references: [id])
  roomType    RoomType?@relation(fields: [roomTypeId], references: [id])
}

model Itinerary {
  id          String    @id @default(cuid())
  userId      String
  totalPrice  Float?
  paymentInfo Json
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  bookings    Booking[] 
}


model City {
  id String @id @default(cuid())
  city String
  country String
}

model Airport {
  id String @id
  city String
  country String
  code String @unique
  name String
}

model Notification {
  id String @id @default(cuid())
  userId String
  title String
  description String
  isRead Boolean
  user User @relation(fields: [userId], references: [id])
}